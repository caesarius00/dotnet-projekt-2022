// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt.DBAccess;

#nullable disable

namespace Projekt.DBAccess.Migrations
{
    [DbContext(typeof(BeerAppContext))]
    partial class BeerAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("Projekt.Models.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Alcohol")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BeerTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BreweryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeerTypeId");

                    b.HasIndex("BreweryId");

                    b.ToTable("Beers");
                });

            modelBuilder.Entity("Projekt.Models.BeerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BeerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BeerUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Review")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("BeerUserId");

                    b.ToTable("BeerReviews");
                });

            modelBuilder.Entity("Projekt.Models.BeerRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BeerRoles");
                });

            modelBuilder.Entity("Projekt.Models.BeerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAlcohol")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAlcohol")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BeerTypes");
                });

            modelBuilder.Entity("Projekt.Models.BeerUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BeerRoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BeerRoleId");

                    b.ToTable("BeerUsers");
                });

            modelBuilder.Entity("Projekt.Models.Brewery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Breweries");
                });

            modelBuilder.Entity("Projekt.Models.Beer", b =>
                {
                    b.HasOne("Projekt.Models.BeerType", "BeerType")
                        .WithMany("Beers")
                        .HasForeignKey("BeerTypeId");

                    b.HasOne("Projekt.Models.Brewery", "Brewery")
                        .WithMany("Beers")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeerType");

                    b.Navigation("Brewery");
                });

            modelBuilder.Entity("Projekt.Models.BeerReview", b =>
                {
                    b.HasOne("Projekt.Models.Beer", "Beer")
                        .WithMany("BeerReviews")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projekt.Models.BeerUser", "BeerUser")
                        .WithMany("BeerReviews")
                        .HasForeignKey("BeerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("BeerUser");
                });

            modelBuilder.Entity("Projekt.Models.BeerUser", b =>
                {
                    b.HasOne("Projekt.Models.BeerRole", "BeerRole")
                        .WithMany("BeerUsers")
                        .HasForeignKey("BeerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeerRole");
                });

            modelBuilder.Entity("Projekt.Models.Beer", b =>
                {
                    b.Navigation("BeerReviews");
                });

            modelBuilder.Entity("Projekt.Models.BeerRole", b =>
                {
                    b.Navigation("BeerUsers");
                });

            modelBuilder.Entity("Projekt.Models.BeerType", b =>
                {
                    b.Navigation("Beers");
                });

            modelBuilder.Entity("Projekt.Models.BeerUser", b =>
                {
                    b.Navigation("BeerReviews");
                });

            modelBuilder.Entity("Projekt.Models.Brewery", b =>
                {
                    b.Navigation("Beers");
                });
#pragma warning restore 612, 618
        }
    }
}
